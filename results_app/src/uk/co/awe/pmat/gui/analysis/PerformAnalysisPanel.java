package uk.co.awe.pmat.gui.analysis;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.beans.PropertyChangeListener;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import uk.co.awe.pmat.gui.GuiPanel;
import uk.co.awe.pmat.gui.models.analysis.PerformAnalysisAxisModel;
import uk.co.awe.pmat.gui.models.analysis.PerformAnalysisModel;

/**
 * A panel to hold a list of {@link PerformAnalysisAxisPanel}s and to allow for
 * the removal or addition of these panels.
 * 
 * @author AWE Plc copyright 2013
 */
public class PerformAnalysisPanel extends GuiPanel {

	private final PerformAnalysisModel performAnalysisModel;
	private final GridBagConstraints gbc;
	private final JPanel spacer;
	private final PropertyChangeListener workerListener;

	/**
	 * Create a new {@code PerformAnalysisPanel}.
	 * 
	 * @param performAnalysisModel
	 *            the model driving this panel.
	 * @param workerListener
	 *            a listener to be kept informed of the state of any {@code
	 *            SwingWorker}s launched.
	 */
	public PerformAnalysisPanel(PerformAnalysisModel performAnalysisModel,
			PropertyChangeListener workerListener) {
		initComponents();
		this.performAnalysisModel = performAnalysisModel;
		this.workerListener = workerListener;

		gbc = new GridBagConstraints(0, GridBagConstraints.RELATIVE, // grid x,
																		// y
				1, 1, // gridwith x, y
				1.0, 0.0, // weight x, y
				GridBagConstraints.CENTER, // anchor
				GridBagConstraints.HORIZONTAL, // fill
				new Insets(0, 0, 0, 0), // insets
				0, 0 // pad x, y
		);
		spacer = new JPanel();

		performAnalysisModel.addAxisAnalysis();
	}

	@Override
	public void stateChanged(ChangeEvent e) {
		updatePanels();
	}

	/**
	 * Update the list of displayed {@link PerformAnalysisAxisPanel}s.
	 */
	void updatePanels() {
		axisPanels.removeAll();

		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.weighty = 0.0;
		for (PerformAnalysisAxisModel model : performAnalysisModel
				.getAxisAnalyses()) {
			PerformAnalysisAxisPanel panel = new PerformAnalysisAxisPanel(
					model, workerListener);
			model.addChangeListener(panel);
			axisPanels.add(panel, gbc);
		}

		gbc.fill = GridBagConstraints.BOTH;
		gbc.weighty = 1.0;
		axisPanels.add(spacer, gbc);

		validate();

		final int scrollMax = axisPanelsScroll.getVerticalScrollBar()
				.getMaximum();
		axisPanelsScroll.getVerticalScrollBar().setValue(scrollMax);
	}

	/**
	 * This method is called from within the constructor to initialise the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		setLayout(new java.awt.BorderLayout());

		axisPanels.setLayout(new java.awt.GridBagLayout());
		axisPanelsScroll.setViewportView(axisPanels);

		add(axisPanelsScroll, java.awt.BorderLayout.CENTER);
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private final javax.swing.JPanel axisPanels = new javax.swing.JPanel();
	private final javax.swing.JScrollPane axisPanelsScroll = new javax.swing.JScrollPane();
	// End of variables declaration//GEN-END:variables

}
