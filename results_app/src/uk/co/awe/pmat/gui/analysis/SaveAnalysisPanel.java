package uk.co.awe.pmat.gui.analysis;

import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import uk.co.awe.pmat.db.DatabaseException;
import uk.co.awe.pmat.gui.ExceptionDialog;
import uk.co.awe.pmat.gui.GuiPanel;
import uk.co.awe.pmat.gui.models.analysis.SaveAnalysisModel;

/**
 * A panel to allow the saving of the current analysis to the database.
 * 
 * @author AWE Plc copyright 2013
 */
public final class SaveAnalysisPanel extends GuiPanel {

	private static final Logger LOG = LoggerFactory
			.getLogger(SaveAnalysisPanel.class);

	private final SaveAnalysisModel saveAnalysisModel;

	/**
	 * The action to perform to save the analysis to the database.
	 */
	private final Action saveAction = new AbstractAction("Save") {
		@Override
		public void actionPerformed(ActionEvent e) {
			try {
				saveAnalysisModel.saveAnalysis();
				JOptionPane.showMessageDialog(SwingUtilities
						.getRoot(SaveAnalysisPanel.this), "Analysis saved");
			} catch (DatabaseException ex) {
				ExceptionDialog.showDatabaseExceptionDialog(ex);
			}
		}
	};

	/**
	 * The action to perform to specify that the current analysis is private.
	 */
	private final Action privateCheckAction = new AbstractAction(
			"Analysis Private") {
		@Override
		public void actionPerformed(ActionEvent e) {
			saveAnalysisModel.setPrivate(privateCheck.isSelected());
		}
	};

	/**
	 * Create a new {@code SaveAnalysisPanel}.
	 * 
	 * @param saveAnalysisModel
	 *            the model driving this panel.
	 */
	public SaveAnalysisPanel(SaveAnalysisModel saveAnalysisModel) {
		initComponents();
		this.saveAnalysisModel = saveAnalysisModel;

		creatorText.setText(saveAnalysisModel.getCreator());

		notesText.getDocument().addDocumentListener(new DocumentListener() {
			@Override
			public void insertUpdate(DocumentEvent e) {
				notesTextChanged();
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				notesTextChanged();
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				notesTextChanged();
			}
		});

		creatorText.getDocument().addDocumentListener(new DocumentListener() {
			@Override
			public void insertUpdate(DocumentEvent e) {
				creatorTextChanged();
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				creatorTextChanged();
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				creatorTextChanged();
			}
		});

		saveButton.setAction(saveAction);
		privateCheck.setAction(privateCheckAction);
	}

	/**
	 * Update the analysis notes whenever the notes text field changes.
	 */
	private void notesTextChanged() {
		saveAnalysisModel.setNotes(notesText.getText());
	}

	/**
	 * Update the analysis creator whenever the creator text field changes.
	 */
	private void creatorTextChanged() {
		saveAnalysisModel.setCreator(creatorText.getText());
	}

	@Override
	public void stateChanged(ChangeEvent e) {
		creatorText.setText(saveAnalysisModel.getCreator());
		notesText.setText(saveAnalysisModel.getNotes());
	}

	/**
	 * This method is called from within the constructor to initialise the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		setLayout(new java.awt.GridBagLayout());

		creatorText.setEditable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		add(creatorText, gridBagConstraints);

		creatorLabel.setText("Creator");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		add(creatorLabel, gridBagConstraints);

		notesLabel.setText("Notes");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		add(notesLabel, gridBagConstraints);

		notesText.setColumns(20);
		notesText.setRows(5);
		notesScroll.setViewportView(notesText);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		add(notesScroll, gridBagConstraints);

		privateCheck.setText("Analysis is private");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		add(privateCheck, gridBagConstraints);

		buttonPanel.setLayout(new java.awt.GridLayout(1, 3, 5, 0));

		saveButton.setText("Save Analysis");
		buttonPanel.add(saveButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
		add(buttonPanel, gridBagConstraints);
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private final javax.swing.JPanel buttonPanel = new javax.swing.JPanel();
	private final javax.swing.JLabel creatorLabel = new javax.swing.JLabel();
	private final javax.swing.JTextField creatorText = new javax.swing.JTextField();
	private final javax.swing.JLabel notesLabel = new javax.swing.JLabel();
	private final javax.swing.JScrollPane notesScroll = new javax.swing.JScrollPane();
	private final javax.swing.JTextArea notesText = new javax.swing.JTextArea();
	private final javax.swing.JCheckBox privateCheck = new javax.swing.JCheckBox();
	private final javax.swing.JButton saveButton = new javax.swing.JButton();
	// End of variables declaration//GEN-END:variables

}
