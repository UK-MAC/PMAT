package uk.co.awe.pmat.gui.analysis;

import java.beans.PropertyChangeListener;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import uk.co.awe.pmat.graph.GraphConfig;
import uk.co.awe.pmat.gui.GuiPanel;
import uk.co.awe.pmat.gui.events.EventHub;
import uk.co.awe.pmat.gui.graph.AxisListPanel;
import uk.co.awe.pmat.gui.graph.GraphLabelPanel;
import uk.co.awe.pmat.gui.graph.GraphPanel;
import uk.co.awe.pmat.gui.models.DataFilterModel;
import uk.co.awe.pmat.gui.models.DerivedDataModel;
import uk.co.awe.pmat.gui.models.analysis.AnalysisModel;
import uk.co.awe.pmat.gui.models.analysis.AxisListModel;
import uk.co.awe.pmat.gui.models.analysis.PerformAnalysisModel;
import uk.co.awe.pmat.gui.models.analysis.SaveAnalysisModel;

/**
 * The main container panel housing the display and configuration panels needed
 * to perform all the required analysis on the database.
 * 
 * @author AWE Plc copyright 2013
 */
public final class AnalysisPanel extends GuiPanel {

	private final AnalysisModel analysisModel;

	private final GuiPanel graphPanel;
	private final GuiPanel criteriaListPanel;
	private final GuiPanel axisSelectionPanel;
	private final GuiPanel performAnalysisPanel;
	private final GuiPanel saveAnalysisPanel;
	private final GuiPanel graphConfigPanel;
	private final GuiPanel derivedDataPanel;

	/**
	 * Creates new {@code AnalysisPanel}.
	 * 
	 * @param analysisModel
	 *            the underlying model of this panel.
	 * @param workerListener
	 *            a listener to be kept informed of the state of any {@code
	 *            SwingWorker}s launched.
	 */
	public AnalysisPanel(AnalysisModel analysisModel,
			PropertyChangeListener workerListener) {
		initComponents();

		this.analysisModel = analysisModel;
		analysisModel.addChangeListener((ChangeListener) this);

		graphPanel = new GraphPanel(analysisModel.getGraphModel(),
				analysisModel.getEventHub(), workerListener);

		DataFilterModel critModel = analysisModel.getDataFilterModel();
		AxisListModel axisModel = analysisModel.getAxisSelectionModel();
		PerformAnalysisModel perfModel = analysisModel
				.getPerformAnalysisModel();
		SaveAnalysisModel saveModel = analysisModel.getSaveAnalysisModel();
		GraphConfig confModel = analysisModel.getGraphConfig();
		DerivedDataModel dervModel = analysisModel.getDerivedDataModel();

		criteriaListPanel = new DataFilterListPanel(critModel);
		axisSelectionPanel = new AxisListPanel(axisModel);
		performAnalysisPanel = new PerformAnalysisPanel(perfModel,
				workerListener);
		saveAnalysisPanel = new SaveAnalysisPanel(saveModel);
		graphConfigPanel = new GraphLabelPanel(confModel);
		derivedDataPanel = new DerivedDataPanel(dervModel);

		critModel.addChangeListener(criteriaListPanel);
		axisModel.addChangeListener(axisSelectionPanel);
		perfModel.addChangeListener(performAnalysisPanel);
		saveModel.addChangeListener(saveAnalysisPanel);
		dervModel.addChangeListener(derivedDataPanel);

		refreshInputPanels();
		addInputPanels();

		updateGraphPanels();
	}

	/**
	 * Add all the configuration panels to the configuration tab panel.
	 */
	private void addInputPanels() {
		configPanels.add("Select Data", criteriaListPanel);
		configPanels.add("Derived Data", derivedDataPanel);
		configPanels.add("Select Axes", axisSelectionPanel);
		configPanels.add("Edit Labels", graphConfigPanel);
		configPanels.add("Perform Analyses", performAnalysisPanel);
		configPanels.add("Save Analysis", saveAnalysisPanel);
	}

	/**
	 * The panels where not connected to the models during whilst they were
	 * being constructed so now we need to tell all the panels to check for
	 * changes and act accordingly.
	 */
	private void refreshInputPanels() {
		ChangeEvent changeEvent = new ChangeEvent(this);
		criteriaListPanel.stateChanged(changeEvent);
		axisSelectionPanel.stateChanged(changeEvent);
		performAnalysisPanel.stateChanged(changeEvent);
		saveAnalysisPanel.stateChanged(changeEvent);
		graphConfigPanel.stateChanged(changeEvent);
		derivedDataPanel.stateChanged(changeEvent);
		graphPanel.stateChanged(changeEvent);
	}

	/**
	 * Add a panel for the graph and an additional one for each data table used
	 * in drawing the graph.
	 */
	private void updateGraphPanels() {
		displayPanels.removeAll();
		displayPanels.add("Graph", graphPanel);
		int panelIdx = 1;
		for (JPanel panel : analysisModel.getGraphDataPanels()) {
			displayPanels.add("Data " + panelIdx, panel);
			++panelIdx;
		}
	}

	@Override
	public void stateChanged(ChangeEvent e) {
		updateGraphPanels();
	}

	/**
	 * This method is called from within the constructor to initialise the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		setLayout(new java.awt.BorderLayout());

		panelSplit.setDividerLocation(700);
		panelSplit.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
		panelSplit.setResizeWeight(1.0);
		panelSplit.setLeftComponent(displayPanels);
		panelSplit.setBottomComponent(configPanels);

		add(panelSplit, java.awt.BorderLayout.CENTER);
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private final javax.swing.JTabbedPane configPanels = new javax.swing.JTabbedPane();
	private final javax.swing.JTabbedPane displayPanels = new javax.swing.JTabbedPane();
	private final javax.swing.JSplitPane panelSplit = new javax.swing.JSplitPane();
	// End of variables declaration//GEN-END:variables

}
