/* Generated By:JavaCC: Do not edit this line. DerivedDataParser.java */
package uk.co.awe.pmat.deriveddata;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import static uk.co.awe.pmat.deriveddata.ParserValues.*;

/**
 * A parser to allow for the create of derived data fields in the analysis. This
 * parses a text input and uses it to identify functions, constants and data
 * variables. These are wrapped in <code>DerivedData</code> objects which can be
 * evaluated at a later time to generate the derived data required.
 * 
 * The parser is built with JavaCC and the Java code should <strong>not</strong>
 * be edited directly.
 * 
 * @author AWE Plc copyright 2013
 */
public final class DerivedDataParser implements DerivedDataParserConstants {

	private static final Map<String, Integer> OpPrecedence;

	static {
		OpPrecedence = new HashMap<String, Integer>();
		OpPrecedence.put("+", 0);
		OpPrecedence.put("-", 0);
		OpPrecedence.put("/", 1);
		OpPrecedence.put("*", 1);
	}

	private TreeMap<String, Variable> variableMap = new TreeMap<String, Variable>();
	private TreeMap<String, Property> propertyMap = new TreeMap<String, Property>();
	private TreeMap<String, Function> functionMap = new TreeMap<String, Function>();

	/**
	 * Set the mapping from strings to functions that will be used when parsing
	 * function tokens. A function token is an unquoted string followed by a
	 * left parenthesis "(".
	 * 
	 * @param functionMap
	 *            The function map to use
	 */
	public void setFunctions(Map<String, Function> functionMap) {
		this.functionMap = new TreeMap<String, Function>(
				String.CASE_INSENSITIVE_ORDER);
		this.functionMap.putAll(functionMap);
	}

	/**
	 * Set the mapping from strings to properties that will be used when parsing
	 * property tokens. A property token is an unquoted string. This acesses a
	 * property value of a run, i.e. the SystemState.Machine or Application.
	 * 
	 * @param propertyMap
	 *            The property map to use
	 */
	public void setProperties(Map<String, Property> propertyMap) {
		this.propertyMap = new TreeMap<String, Property>(
				String.CASE_INSENSITIVE_ORDER);
		this.propertyMap.putAll(propertyMap);
	}

	/**
	 * Set the mapping from strings to variables that will be used when parsing
	 * variable tokens. A variable is a single quoted string. This references
	 * the values stored in a result, i.e. 'Application Time'.
	 * 
	 * @param variableMap
	 *            The variable map to use
	 */
	public void setVariables(Map<String, Variable> variableMap) {
		this.variableMap = new TreeMap<String, Variable>(
				String.CASE_INSENSITIVE_ORDER);
		this.variableMap.putAll(variableMap);
	}

	private Function getFunction(String funcName) throws ParseException {
		if (functionMap.containsKey(funcName)) {
			return functionMap.get(funcName).newInstance();
		} else {
			throw new ParseException("Unknown function: " + funcName);
		}
	}

	private Variable getVariable(String varName) throws ParseException {
		varName = varName.substring(1, varName.length() - 1); // strip quotes
		if (variableMap.containsKey(varName)) {
			return variableMap.get(varName);
		} else {
			throw new ParseException("Unknown variable: " + varName);
		}
	}

	private Property getProperty(String entName) throws ParseException {
		if (propertyMap.containsKey(entName)) {
			return propertyMap.get(entName);
		} else {
			throw new ParseException("Unknown property: " + entName);
		}
	}

	private static DerivedData evaluateBinOp(String op, DerivedData lhs,
			DerivedData rhs) throws ParseException, InvalidArgumentsException {
		Function func;
		if (op.equals("+")) {
			func = new Operators.Add();
		} else if (op.equals("-")) {
			func = new Operators.Subtract();
		} else if (op.equals("/")) {
			func = new Operators.Divide();
		} else if (op.equals("*")) {
			func = new Operators.Multiply();
		} else {
			throw new ParseException("Unknown operator " + op);
		}
		func.bind(lhs, rhs);
		return func;
	}

	private static DerivedData evaluateBinOps(List<String> bops,
			List<DerivedData> nums) throws ParseException,
			InvalidArgumentsException {

		assert nums.size() == bops.size() + 1;

		DerivedData res = recursiveBinOp(bops, nums);

		bops.clear();
		nums.clear();

		return res;
	}

	private static DerivedData recursiveBinOp(List<String> ops,
			List<DerivedData> nums) throws ParseException,
			InvalidArgumentsException {

		assert nums.size() == ops.size() + 1;

		if (ops.isEmpty()) {
			assert (nums.size() == 1);
			return nums.get(0);
		} else if (ops.size() == 1) {
			assert nums.size() == 2;
			return evaluateBinOp(ops.get(0), nums.get(0), nums.get(1));
		} else {
			int maxPrec = getMaxPrecedence(ops);

			int opIdx;
			for (opIdx = 0; opIdx < ops.size(); ++opIdx) {
				if (OpPrecedence.get(ops.get(opIdx)).equals(maxPrec)) {
					break;
				}
			}

			String op = ops.get(opIdx);
			DerivedData lhs = nums.get(opIdx);
			DerivedData rhs = nums.get(opIdx + 1);

			ops.remove(opIdx);
			nums.remove(opIdx);
			nums.remove(opIdx);
			nums.add(opIdx, evaluateBinOp(op, lhs, rhs));

			return recursiveBinOp(ops, nums);
		}
	}

	private static int getMaxPrecedence(List<String> ops) {
		int max = 0;
		for (String op : ops) {
			max = Math.max(max, OpPrecedence.get(op));
		}
		return max;
	}

	final public DerivedData parse() throws ParseException,
			InvalidArgumentsException {
		Token t;
		DerivedData v;
		v = expression(null, null);
		jj_consume_token(0);
		{
			if (true)
				return v;
		}
		throw new Error("Missing return statement in function");
	}

	final public DerivedData expression(List<String> bops,
			List<DerivedData> nums) throws ParseException,
			InvalidArgumentsException {
		Token t;
		DerivedData v;
		if (bops == null)
			bops = new ArrayList<String>();
		if (nums == null)
			nums = new ArrayList<DerivedData>();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case PLUS:
		case MINUS:
		case NUMBER:
		case VARIABLE:
		case NAME:
		case STRING:
		case ENTITY:
			v = value();
			nums.add(v);
			label_1: while (true) {
				if (jj_2_1(2)) {
					;
				} else {
					break label_1;
				}
				binop(bops, nums);
			}
			v = evaluateBinOps(bops, nums);
			break;
		case LBRACKET:
			jj_consume_token(LBRACKET);
			v = expression(null, null);
			jj_consume_token(RBRACKET);
			nums.add(v);
			label_2: while (true) {
				if (jj_2_2(2)) {
					;
				} else {
					break label_2;
				}
				binop(bops, nums);
			}
			v = evaluateBinOps(bops, nums);
			break;
		default:
			jj_la1[0] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return v;
		}
		throw new Error("Missing return statement in function");
	}

	final public void binop(List<String> bops, List<DerivedData> nums)
			throws ParseException, InvalidArgumentsException {
		Token t;
		DerivedData v;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case PLUS:
			t = jj_consume_token(PLUS);
			break;
		case MINUS:
			t = jj_consume_token(MINUS);
			break;
		case TIMES:
			t = jj_consume_token(TIMES);
			break;
		case DIVIDE:
			t = jj_consume_token(DIVIDE);
			break;
		default:
			jj_la1[1] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		bops.add(t.image);
		v = expression(bops, nums);
		nums.add(v);
	}

	final public DerivedData value() throws ParseException,
			InvalidArgumentsException {
		Token t;
		DerivedData v;
		String op = null;
		List<DerivedData> args = new ArrayList<DerivedData>();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case PLUS:
		case MINUS:
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case PLUS:
				t = jj_consume_token(PLUS);
				break;
			case MINUS:
				t = jj_consume_token(MINUS);
				op = t.image;
				break;
			default:
				jj_la1[2] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			break;
		default:
			jj_la1[3] = jj_gen;
			;
		}
		if (jj_2_3(2)) {
			t = jj_consume_token(NAME);
			jj_consume_token(LBRACKET);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case PLUS:
			case MINUS:
			case LBRACKET:
			case NUMBER:
			case VARIABLE:
			case NAME:
			case STRING:
			case ENTITY:
				v = expression(null, null);
				args.add(v);
				label_3: while (true) {
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case COMMA:
						;
						break;
					default:
						jj_la1[4] = jj_gen;
						break label_3;
					}
					jj_consume_token(COMMA);
					v = expression(null, null);
					args.add(v);
				}
				break;
			default:
				jj_la1[5] = jj_gen;
				;
			}
			jj_consume_token(RBRACKET);
			Function func = getFunction(t.image);
			func.bind(args.toArray(new DerivedData[0]));
			v = func;
		} else {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NAME:
				t = jj_consume_token(NAME);
				v = getProperty(t.image);
				break;
			case NUMBER:
				t = jj_consume_token(NUMBER);
				v = new Constant<Double>(Double.parseDouble(t.image));
				break;
			case VARIABLE:
				t = jj_consume_token(VARIABLE);
				v = getVariable(t.image);
				break;
			case STRING:
				t = jj_consume_token(STRING);
				String str = t.image.substring(1, t.image.length() - 1); // strip
																			// quotes
				v = new Constant<String>(str);
				break;
			case ENTITY:
				t = jj_consume_token(ENTITY);
				v = getProperty(t.image);
				break;
			default:
				jj_la1[6] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		if ("-".equals(op)) {
			Function neg = new Operators.Negative();
			neg.bind(v);
			{
				if (true)
					return neg;
			}
		} else {
			if (true)
				return v;
		}
		throw new Error("Missing return statement in function");
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	private boolean jj_3R_11() {
		if (jj_scan_token(NUMBER))
			return true;
		return false;
	}

	private boolean jj_3_1() {
		if (jj_3R_4())
			return true;
		return false;
	}

	private boolean jj_3R_15() {
		if (jj_scan_token(MINUS))
			return true;
		return false;
	}

	private boolean jj_3R_10() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	private boolean jj_3R_6() {
		if (jj_3R_8())
			return true;
		return false;
	}

	private boolean jj_3R_9() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(6)) {
			jj_scanpos = xsp;
			if (jj_3R_15())
				return true;
		}
		return false;
	}

	private boolean jj_3R_4() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(6)) {
			jj_scanpos = xsp;
			if (jj_scan_token(7)) {
				jj_scanpos = xsp;
				if (jj_scan_token(9)) {
					jj_scanpos = xsp;
					if (jj_scan_token(8))
						return true;
				}
			}
		}
		if (jj_3R_5())
			return true;
		return false;
	}

	private boolean jj_3R_8() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_9())
			jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3_3()) {
			jj_scanpos = xsp;
			if (jj_3R_10()) {
				jj_scanpos = xsp;
				if (jj_3R_11()) {
					jj_scanpos = xsp;
					if (jj_3R_12()) {
						jj_scanpos = xsp;
						if (jj_3R_13()) {
							jj_scanpos = xsp;
							if (jj_3R_14())
								return true;
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_14() {
		if (jj_scan_token(ENTITY))
			return true;
		return false;
	}

	private boolean jj_3R_5() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_6()) {
			jj_scanpos = xsp;
			if (jj_3R_7())
				return true;
		}
		return false;
	}

	private boolean jj_3_2() {
		if (jj_3R_4())
			return true;
		return false;
	}

	private boolean jj_3R_13() {
		if (jj_scan_token(STRING))
			return true;
		return false;
	}

	private boolean jj_3R_12() {
		if (jj_scan_token(VARIABLE))
			return true;
		return false;
	}

	private boolean jj_3R_7() {
		if (jj_scan_token(LBRACKET))
			return true;
		return false;
	}

	private boolean jj_3_3() {
		if (jj_scan_token(NAME))
			return true;
		if (jj_scan_token(LBRACKET))
			return true;
		return false;
	}

	/** Generated Token Manager. */
	public DerivedDataParserTokenManager token_source;
	JavaCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	private int jj_gen;
	final private int[] jj_la1 = new int[7];
	static private int[] jj_la1_0;
	static {
		jj_la1_init_0();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0xe424c0, 0x3c0, 0xc0, 0xc0, 0x1000, 0xe424c0,
				0xe42000, };
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[3];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public DerivedDataParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public DerivedDataParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new DerivedDataParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 7; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 7; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public DerivedDataParser(java.io.Reader stream) {
		jj_input_stream = new JavaCharStream(stream, 1, 1);
		token_source = new DerivedDataParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 7; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 7; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public DerivedDataParser(DerivedDataParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 7; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(DerivedDataParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 7; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source
						.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind)
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			throw jj_ls;
		return false;
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries
					.iterator(); it.hasNext();) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[24];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 7; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 24; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 3; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
