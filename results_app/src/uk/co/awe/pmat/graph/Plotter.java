package uk.co.awe.pmat.graph;

import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * An interface for a class that can be used to plot the graph data.
 * 
 * @author AWE Plc copyright 2013
 */
public interface Plotter {

	/**
	 * Write/store the graph data ready to be plotted.
	 * 
	 * @param plottables
	 *            the graph data to plot.
	 * @throws IOException
	 *             if an error occurs writing the data.
	 */
	void writeDataFile(List<? extends Plottable> plottables) throws IOException;

	/**
	 * Write the graph data to the given file.
	 * 
	 * @param plottables
	 *            the graph data to plot.
	 * @param dataFile
	 *            the file to write the data to.
	 * @throws IOException
	 *             if an error occurs writing the data.
	 */
	void writeDataFile(List<? extends Plottable> plottables, File dataFile)
			throws IOException;

	/**
	 * Write the command file that will be used to instruct the plotter in how
	 * to plot the data stored in the data file.
	 * 
	 * @param plottables
	 *            the graph data to plot.
	 * @param graphConfig
	 *            the configuration model holding graph config details such as
	 *            label renames and log axes.
	 * @throws IOException
	 *             if an error occurs write the command file.
	 */
	void writeCommandFile(List<? extends Plottable> plottables,
			GraphConfig graphConfig) throws IOException;

	/**
	 * Write the command instructions to the given file which will be used to
	 * instruct the plotter in how to plot the data stored in the data file.
	 * 
	 * @param plottables
	 *            the graph data to plot.
	 * @param graphConfig
	 *            the configuration model holding graph config details such as
	 *            label renames and log axes.
	 * @param forExport
	 *            if the command file should be outputting the image in a
	 *            specific located, used to export the image, or whether it can
	 *            output to a temporary location to read in later.
	 * @param forTeX
	 *            if the command file should be outputting the image in a format
	 *            that can be imported by TeX documents.
	 * @param commandFile
	 *            the file to write the command statements to.
	 * @throws IOException
	 *             if an error occurs write the command file.
	 */
	void writeCommandFile(List<? extends Plottable> plottables,
			GraphConfig graphConfig, boolean forExport, boolean forTeX,
			File commandFile) throws IOException;

	/**
	 * Launch the plotter.
	 * 
	 * @throws IOException
	 *             if an error occurs during the execution of the plotter.
	 */
	void runPlotter() throws IOException;

	/**
	 * Test that the plotter is working on the current system.
	 * 
	 * @return {@code true} if the plotter works, {@code false} otherwise.
	 */
	boolean testPlotter();

	/**
	 * Retrieve the outputted image file generated by running the plotter.
	 * 
	 * @return the output image file.
	 */
	File getPlotFile();

	/**
	 * Sets the desired size of the outputted image. This request may be ignored
	 * if the requested size is too similar to the old size in order to reduce
	 * the number of times the image is created.
	 * 
	 * @param size
	 *            the required image size.
	 * @return {@code true} if this call resulted in the image size actually
	 *         changing, {@code false} otherwise.
	 */
	boolean setImageSize(Dimension size);

	/**
	 * Set the type of the plot being plotted, e.g. scatter, Kiviat, etc.
	 * 
	 * @param plotType
	 *            the plot type.
	 * @return {@code true} if the plot type has changed, {@code false}
	 *         otherwise.
	 */
	boolean setPlotType(PlotType plotType);

}
